<?php

namespace yii\swiftcurrency;

use linslin\yii2\curl\Curl;
use yii\base\Component;
use yii\base\InvalidConfigException;
use yii\swiftcurrency\caching\Cache;
use yii\swiftcurrency\caching\CachingInterface;
use yii\swiftcurrency\enum\Status;
use yii\swiftcurrency\exceptions\RatePullException;

class Gateway extends Component
{
    public array $providers = [];
    public string $baseCurrency;
    public ?array $caching = null;

    private ProviderInterface $_provider;
    private ?CachingInterface $_cachingProvider;


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (!$this->providers) {
            throw new InvalidConfigException('Property "providers" is mandatory for swiftcurrency component.');
        }

        if ($this->caching) {
            if (!isset($this->caching['connection']) || empty($this->caching['connection']) ||
                (is_array($this->caching['connection']) && count($this->caching['connection']) === 0)
            ) {
                throw new InvalidConfigException('Logging connection must be set.');
            }
            if (!isset($this->caching['class']) || empty($this->caching['class'])) {
                $this->caching['class'] = Cache::class;
            }

            $this->_cachingProvider = \Yii::createObject($this->caching);
        }
    }

    /**
     * Get selected transporter to be used to send a SMS.
     * This property is not read only property for this component.
     *
     * @return ProviderInterface
     * @throws InvalidConfigException
     */
    public function getProvider(): ProviderInterface
    {
        $curlObject = new Curl();
        // useragent for the gateway calls.
        $curlObject->setOption(CURLOPT_USERAGENT, 'yii2-swiftcurrency');

        $params = [
            'class' => $this->providers[0]['class'],
            'apiKey' => $this->providers[0]['apiKey']
        ];
        $params += $this->providers[0]['params'] ?? [];
        return \Yii::createObject($params, [$curlObject]);
    }

    /**
     * Get exchange rates.
     * @return Response
     * @throws RatePullException
     */

    public function getRates(): Response
    {
        $response = $this->getProvider()->getExchangeRates($this->baseCurrency);

        if ($this->caching && $response && $response->getStatus() == Status::SUCCESS()) {
            $this->getCachingProvider()->setRecord([
                'timeline' => $response->getTimeLine()->format('Y-m-d H:i:s'),
                'base_currency' => $response->getBaseCurrency(),
                'exchange_rates' => json_encode($response->getExchangeRates()),
                'provider' => $response->getProvider()
            ]);
        }

        return $response;
    }

    /**
     * Get credit balance of SMS available in the account.
     *
     * @return int
     * @throws exceptions\BalanceException
     */
    public function getBalance(): int
    {
        return $this->getProvider()->getBalance();
    }


    public function getCachingProvider(): ?CachingInterface
    {
        if ($this->_cachingProvider instanceof CachingInterface) {
            return $this->_cachingProvider;
        }

        return null;
    }
}
